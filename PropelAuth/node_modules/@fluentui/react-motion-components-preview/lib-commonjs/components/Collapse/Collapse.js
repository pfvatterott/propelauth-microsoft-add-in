"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Collapse: function() {
        return Collapse;
    },
    CollapseExaggerated: function() {
        return CollapseExaggerated;
    },
    CollapseSnappy: function() {
        return CollapseSnappy;
    }
});
const _reactmotion = require("@fluentui/react-motion");
/** Define a presence motion for collapse/expand */ const collapseMotion = ({ element, animateOpacity = true })=>{
    const fromOpacity = animateOpacity ? 0 : 1;
    const toOpacity = 1;
    const fromHeight = '0'; // Could be a custom param in the future: start partially expanded
    const toHeight = `${element.scrollHeight}px`;
    const overflow = 'hidden';
    const duration = _reactmotion.motionTokens.durationNormal;
    const easing = _reactmotion.motionTokens.curveEasyEaseMax;
    const enterKeyframes = [
        {
            opacity: fromOpacity,
            maxHeight: fromHeight,
            overflow
        },
        // Transition to the height of the content, at 99.99% of the duration.
        {
            opacity: toOpacity,
            maxHeight: toHeight,
            offset: 0.9999,
            overflow
        },
        // On completion, remove the maxHeight because the content might need to expand later.
        // This extra keyframe is simpler than firing a callback on completion.
        {
            opacity: toOpacity,
            maxHeight: 'unset',
            overflow
        }
    ];
    const exitKeyframes = [
        {
            opacity: toOpacity,
            maxHeight: toHeight,
            overflow
        },
        {
            opacity: fromOpacity,
            maxHeight: fromHeight,
            overflow
        }
    ];
    return {
        enter: {
            duration,
            easing,
            keyframes: enterKeyframes
        },
        exit: {
            duration,
            easing,
            keyframes: exitKeyframes
        }
    };
};
const Collapse = (0, _reactmotion.createPresenceComponent)(collapseMotion);
const CollapseSnappy = (0, _reactmotion.createPresenceComponentVariant)(Collapse, {
    all: {
        duration: _reactmotion.motionTokens.durationUltraFast
    }
});
const CollapseExaggerated = (0, _reactmotion.createPresenceComponentVariant)(Collapse, {
    enter: {
        duration: _reactmotion.motionTokens.durationSlow,
        easing: _reactmotion.motionTokens.curveEasyEaseMax
    },
    exit: {
        duration: _reactmotion.motionTokens.durationNormal,
        easing: _reactmotion.motionTokens.curveEasyEaseMax
    }
});
